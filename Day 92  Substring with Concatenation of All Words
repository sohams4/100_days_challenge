QUESTION: Substring with Concatenation of All Words

You are given a string s and an array of strings words. All the strings of words are of the same length.

A concatenated substring in s is a substring that contains all the strings of any permutation of words concatenated.

For example, if words = ["ab","cd","ef"], then "abcdef", "abefcd", "cdabef", "cdefab", "efabcd", and "efcdab" are all concatenated strings. "acdbef" is not a concatenated substring because it is not the concatenation of any permutation of words.
Return the starting indices of all the concatenated substrings in s. You can return the answer in any order.

 

Example 1:

Input: s = "barfoothefoobarman", words = ["foo","bar"]
Output: [0,9]
Explanation: Since words.length == 2 and words[i].length == 3, the concatenated substring has to be of length 6.
The substring starting at 0 is "barfoo". It is the concatenation of ["bar","foo"] which is a permutation of words.
The substring starting at 9 is "foobar". It is the concatenation of ["foo","bar"] which is a permutation of words.
The output order does not matter. Returning [9,0] is fine too.
Example 2:

Input: s = "wordgoodgoodgoodbestword", words = ["word","good","best","word"]
Output: []
Explanation: Since words.length == 4 and words[i].length == 4, the concatenated substring has to be of length 16.
There is no substring of length 16 is s that is equal to the concatenation of any permutation of words.
We return an empty array.

SOLUTION: 

class Solution 
{
    public List<Integer> findSubstring(String s, String[] words) 
    {
        if(words[0].length()*words.length>s.length())
            return new ArrayList<>();
        
        Map<String,Integer> word_frq=new HashMap<>();
        List<Integer> ans=new ArrayList<>();
        
        // Map store the frequency of every word in words[]
        
        for(String str:words)
            word_frq.put(str,word_frq.getOrDefault(str,0)+1);
        
        int wordlen=words[0].length();  
        
        String[] str=new String[s.length()];
        
        for(int i=0;i<wordlen;i++)
        {
            Map<String,Integer> frq=new HashMap<>();  // count frequency of words inside the window
            
            int begin=i,size=0; // size is the no. of window and begin is the starting index of window
            
            // s.length()-wordlen -> based on observation
            
            for(int j=i;j<=s.length()-wordlen;j+=wordlen)
            {
                str[j]=s.substring(j,j+wordlen);  // window
                if(word_frq.containsKey(str[j]))
                {
                    begin= begin==-1? j:begin; // begin=-1 means new window need to be started
                    frq.put(str[j],frq.getOrDefault(str[j],0)+1); 
                    size++; 
                    
                    if(size==words.length)  // substring may be possible
                    {
                        if(frq.equals(word_frq))
                            ans.add(begin);
                        
                        // sliding the window 
                        
                        frq.put(str[begin],frq.get(str[begin])-1); 
                        begin+=wordlen;  // new starting index
                        size--;
                    }
                }
                else  // reset window
                {
                    begin=-1;
                    size=0;
                    frq.clear();
                }
            }
        }
        return ans;
    }
}
