QUESION: Find First and Last Position of Element in Sorted Array

Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

SOLUTION: 

class Solution {
    public int[] searchRange(int[] a, int t) {
        int n=a.length;
        int ans[]=new int[2];
        int l=0;
        int h=n-1;
        int f1=0,f2=0,f=0;
        if(n>0)
        {
        if(a[0]==t)
        {
            ans[0]=0;
            f1=1;
        }
        if(a[n-1]==t)
        {
            ans[1]=n-1;
            f2=1;
        }
        
        int mid=0;
        do{
            if(f1==1)
            {
                break;
            }
            mid=(l+h)/2;
            if(a[mid]==t && a[mid-1]!=t)
            {
                ans[0]=mid;
                f=1;
                break;
            }
            else if(a[mid]>=t)
            {
                h=mid-1;
            }
            else{
                l=mid+1;
            }
        }while(l<=h);
        l=0;
        h=n-1;
        do{
            if(f2==1)
            {
                
                break;

            }
            mid=(l+h)/2;
            if(a[mid]==t && a[mid+1]!=t)
            {
                ans[1]=mid;
                f=1;
                break;
            }
            else if(a[mid]<=t)
            {
                l=mid+1;
            }
            else{
                h=mid-1;
            }
        }while(l<=h);
        }
        else{
            ans[0]=-1;
            ans[1]=-1;
        }
        if(f==0 && f1==0 &&f2==0)
        {
            ans[0]=-1;
            ans[1]=-1;
        }
        return ans;
    }
}
